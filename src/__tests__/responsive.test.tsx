import React from 'react'
import { render, screen } from '@testing-library/react'
import { BrowserRouter } from 'react-router-dom'
import { AppProvider } from '../context/AppContext'
import { ToastProvider } from '../context/ToastContext'
import App from '../App'
import { DogApiService } from '../services/dogApi'
import type { DogImage, DogBreed } from '../types'

// DogApiService„Çí„É¢„ÉÉ„ÇØ
vi.mock('../services/dogApi')
const mockDogApiService = vi.mocked(DogApiService)

const TestWrapper = ({ children }: { children: React.ReactNode }) => (
  <BrowserRouter>
    <AppProvider>
      <ToastProvider>
        {children}
      </ToastProvider>
    </AppProvider>
  </BrowserRouter>
)

// „Éì„É•„Éº„Éù„Éº„Éà„Çµ„Ç§„Ç∫„ÇíÂ§âÊõ¥„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
const setViewportSize = (width: number, height: number) => {
  Object.defineProperty(window, 'innerWidth', {
    writable: true,
    configurable: true,
    value: width,
  })
  Object.defineProperty(window, 'innerHeight', {
    writable: true,
    configurable: true,
    value: height,
  })
  window.dispatchEvent(new Event('resize'))
}

describe('„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÉÜ„Çπ„Éà', () => {
  const mockRandomImage: DogImage = {
    id: 'random-id',
    url: 'https://images.dog.ceo/breeds/labrador/random.jpg',
    breed: 'labrador',
    addedAt: new Date()
  }

  const mockBreeds: DogBreed[] = [
    { id: 'labrador', name: 'labrador', subBreeds: [] },
    { id: 'golden', name: 'golden', subBreeds: ['retriever'] },
    { id: 'bulldog', name: 'bulldog', subBreeds: ['english', 'french'] }
  ]

  beforeEach(() => {
    vi.clearAllMocks()
    localStorage.clear()

    // „Éá„Éï„Ç©„É´„Éà„ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    mockDogApiService.getRandomImage.mockResolvedValue(mockRandomImage)
    mockDogApiService.getAllBreeds.mockResolvedValue(mockBreeds)
    mockDogApiService.getBreedImage.mockResolvedValue(mockRandomImage)
    mockDogApiService.getMultipleBreedImages.mockResolvedValue([mockRandomImage])
  })

  describe('„É¢„Éê„Ç§„É´„Éì„É•„Éº (320px - 768px)', () => {
    beforeEach(() => {
      setViewportSize(375, 667) // iPhone SE „Çµ„Ç§„Ç∫
    })

    it('„É¢„Éê„Ç§„É´„Åß„Éò„ÉÉ„ÉÄ„Éº„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      const header = screen.getByRole('banner')
      expect(header).toBeInTheDocument()
      
      // „Éò„ÉÉ„ÉÄ„Éº„Çø„Ç§„Éà„É´„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('üêï Dog Gallery')).toBeInTheDocument()
    })

    it('„É¢„Éê„Ç§„É´„Åß„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„É™„É≥„ÇØ„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('„Éõ„Éº„É†')).toBeInTheDocument()
      expect(screen.getByText('„ÅäÊ∞ó„Å´ÂÖ•„Çä')).toBeInTheDocument()
    })

    it('„É¢„Éê„Ç§„É´„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåÈÅ©Âàá„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåË°®Á§∫„Åï„Çå„Çã
      const main = screen.getByRole('main')
      expect(main).toBeInTheDocument()
      
      // „É¨„Çπ„Éù„É≥„Ç∑„Éñ„ÇØ„É©„Çπ„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      expect(main).toHaveClass('container', 'mx-auto', 'px-4', 'py-8')
    })
  })

  describe('„Çø„Éñ„É¨„ÉÉ„Éà„Éì„É•„Éº (768px - 1024px)', () => {
    beforeEach(() => {
      setViewportSize(768, 1024) // iPad „Çµ„Ç§„Ç∫
    })

    it('„Çø„Éñ„É¨„ÉÉ„Éà„Åß„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      const main = screen.getByRole('main')
      expect(main).toBeInTheDocument()
      
      // „Çø„Éñ„É¨„ÉÉ„ÉàÁî®„ÅÆ„É¨„Çπ„Éù„É≥„Ç∑„Éñ„ÇØ„É©„Çπ„ÅåÈÅ©Áî®„Åï„Çå„Çã
      expect(main).toHaveClass('container', 'mx-auto', 'px-4', 'py-8')
    })

    it('„Çø„Éñ„É¨„ÉÉ„Éà„Åß„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('„Éõ„Éº„É†')).toBeInTheDocument()
      expect(screen.getByText('„ÅäÊ∞ó„Å´ÂÖ•„Çä')).toBeInTheDocument()
    })
  })

  describe('„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Éì„É•„Éº (1024px+)', () => {
    beforeEach(() => {
      setViewportSize(1920, 1080) // „Éï„É´HD „Çµ„Ç§„Ç∫
    })

    it('„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Åß„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      const main = screen.getByRole('main')
      expect(main).toBeInTheDocument()
      
      // „Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÁî®„ÅÆ„É¨„Çπ„Éù„É≥„Ç∑„Éñ„ÇØ„É©„Çπ„ÅåÈÅ©Áî®„Åï„Çå„Çã
      expect(main).toHaveClass('container', 'mx-auto', 'px-4', 'py-8')
    })

    it('„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Åß„Éò„ÉÉ„ÉÄ„Éº„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      const header = screen.getByRole('banner')
      expect(header).toBeInTheDocument()
      
      // „Éò„ÉÉ„ÉÄ„Éº„Çø„Ç§„Éà„É´„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('üêï Dog Gallery')).toBeInTheDocument()
    })

    it('„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Åß„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„É™„É≥„ÇØ„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('„Éõ„Éº„É†')).toBeInTheDocument()
      expect(screen.getByText('„ÅäÊ∞ó„Å´ÂÖ•„Çä')).toBeInTheDocument()
    })
  })

  describe('ÁîªÂÉè„ÅÆ„É¨„Çπ„Éù„É≥„Ç∑„ÉñË°®Á§∫', () => {
    it('Áï∞„Å™„ÇãÁîªÈù¢„Çµ„Ç§„Ç∫„ÅßÁîªÂÉè„ÅåÈÅ©Âàá„Å´„Çπ„Ç±„Éº„É´„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // ÁîªÂÉè„Ç≥„É≥„ÉÜ„Éä„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const imageContainers = screen.getAllByRole('img', { hidden: true })
      expect(imageContainers.length).toBeGreaterThan(0)
    })

    it('„É¢„Éê„Ç§„É´„ÅßÁîªÂÉè„ÅåÈÅ©Âàá„Å™„Çµ„Ç§„Ç∫„ÅßË°®Á§∫„Åï„Çå„Çã', () => {
      setViewportSize(375, 667)
      
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // ÁîªÂÉèË¶ÅÁ¥†„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const images = screen.getAllByRole('img', { hidden: true })
      expect(images.length).toBeGreaterThan(0)
    })
  })

  describe('„ÉÜ„Ç≠„Çπ„Éà„Å®„Éú„Çø„É≥„ÅÆ„É¨„Çπ„Éù„É≥„Ç∑„ÉñË°®Á§∫', () => {
    it('Áï∞„Å™„ÇãÁîªÈù¢„Çµ„Ç§„Ç∫„Åß„ÉÜ„Ç≠„Çπ„Éà„ÅåË™≠„Åø„ÇÑ„Åô„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // „Çø„Ç§„Éà„É´„ÉÜ„Ç≠„Çπ„Éà„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('üêï Dog Gallery')).toBeInTheDocument()
    })

    it('„Éú„Çø„É≥„ÅåÁï∞„Å™„ÇãÁîªÈù¢„Çµ„Ç§„Ç∫„ÅßÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('„Éõ„Éº„É†')).toBeInTheDocument()
      expect(screen.getByText('„ÅäÊ∞ó„Å´ÂÖ•„Çä')).toBeInTheDocument()
    })
  })

  describe('„É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆ‰∏ÄË≤´ÊÄß', () => {
    it('ÁîªÈù¢„Çµ„Ç§„Ç∫Â§âÊõ¥ÊôÇ„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÂ¥©„Çå„Å™„ÅÑ', () => {
      const { rerender } = render(
        <TestWrapper>
          <App />
        </TestWrapper>
      )

      // „É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫
      setViewportSize(375, 667)
      rerender(
        <TestWrapper>
          <App />
        </TestWrapper>
      )
      expect(screen.getByText('üêï Dog Gallery')).toBeInTheDocument()

      // „Çø„Éñ„É¨„ÉÉ„Éà„Çµ„Ç§„Ç∫
      setViewportSize(768, 1024)
      rerender(
        <TestWrapper>
          <App />
        </TestWrapper>
      )
      expect(screen.getByText('üêï Dog Gallery')).toBeInTheDocument()

      // „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Çµ„Ç§„Ç∫
      setViewportSize(1920, 1080)
      rerender(
        <TestWrapper>
          <App />
        </TestWrapper>
      )
      expect(screen.getByText('üêï Dog Gallery')).toBeInTheDocument()
    })
  })
})